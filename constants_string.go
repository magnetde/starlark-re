// Code generated by "stringer -type=opcode,atCode,chCode -output=constants_string.go"; DO NOT EDIT.

package re

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FAILURE-0]
	_ = x[ANY-1]
	_ = x[ASSERT-2]
	_ = x[ASSERT_NOT-3]
	_ = x[AT-4]
	_ = x[BRANCH-5]
	_ = x[CATEGORY-6]
	_ = x[GROUPREF-7]
	_ = x[GROUPREF_EXISTS-8]
	_ = x[IN-9]
	_ = x[LITERAL-10]
	_ = x[MIN_REPEAT-11]
	_ = x[MAX_REPEAT-12]
	_ = x[NOT_LITERAL-13]
	_ = x[NEGATE-14]
	_ = x[RANGE-15]
	_ = x[SUBPATTERN-16]
	_ = x[ATOMIC_GROUP-17]
	_ = x[POSSESSIVE_REPEAT-18]
}

const _opcode_name = "FAILUREANYASSERTASSERT_NOTATBRANCHCATEGORYGROUPREFGROUPREF_EXISTSINLITERALMIN_REPEATMAX_REPEATNOT_LITERALNEGATERANGESUBPATTERNATOMIC_GROUPPOSSESSIVE_REPEAT"

var _opcode_index = [...]uint8{0, 7, 10, 16, 26, 28, 34, 42, 50, 65, 67, 74, 84, 94, 105, 111, 116, 126, 138, 155}

func (i opcode) String() string {
	if i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AT_BEGINNING-0]
	_ = x[AT_BEGINNING_STRING-1]
	_ = x[AT_BOUNDARY-2]
	_ = x[AT_NON_BOUNDARY-3]
	_ = x[AT_END-4]
	_ = x[AT_END_STRING-5]
}

const _atCode_name = "AT_BEGINNINGAT_BEGINNING_STRINGAT_BOUNDARYAT_NON_BOUNDARYAT_ENDAT_END_STRING"

var _atCode_index = [...]uint8{0, 12, 31, 42, 57, 63, 76}

func (i atCode) String() string {
	if i >= atCode(len(_atCode_index)-1) {
		return "atCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _atCode_name[_atCode_index[i]:_atCode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CATEGORY_DIGIT-0]
	_ = x[CATEGORY_NOT_DIGIT-1]
	_ = x[CATEGORY_SPACE-2]
	_ = x[CATEGORY_NOT_SPACE-3]
	_ = x[CATEGORY_WORD-4]
	_ = x[CATEGORY_NOT_WORD-5]
}

const _chCode_name = "CATEGORY_DIGITCATEGORY_NOT_DIGITCATEGORY_SPACECATEGORY_NOT_SPACECATEGORY_WORDCATEGORY_NOT_WORD"

var _chCode_index = [...]uint8{0, 14, 32, 46, 64, 77, 94}

func (i chCode) String() string {
	if i >= chCode(len(_chCode_index)-1) {
		return "chCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _chCode_name[_chCode_index[i]:_chCode_index[i+1]]
}
