// Code generated by "stringer -type=opcode,atcode,catcode -linecomment -output=constants_string.go"; DO NOT EDIT.

package regex

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opFailure-0]
	_ = x[opAny-1]
	_ = x[opAssert-2]
	_ = x[opAssertNot-3]
	_ = x[opAt-4]
	_ = x[opBranch-5]
	_ = x[opCategory-6]
	_ = x[opGroupref-7]
	_ = x[opGrouprefExists-8]
	_ = x[opIn-9]
	_ = x[opLiteral-10]
	_ = x[opMinRepeat-11]
	_ = x[opMaxRepeat-12]
	_ = x[opNegate-13]
	_ = x[opNotLiteral-14]
	_ = x[opRange-15]
	_ = x[opSubpattern-16]
	_ = x[opAtomicGroup-17]
	_ = x[opPossessiveRepeat-18]
}

const _opcode_name = "FAILUREANYASSERTASSERT_NOTATBRANCHCATEGORYGROUPREFGROUPREF_EXISTSINLITERALMIN_REPEATMAX_REPEATNEGATENOT_LITERALRANGESUBPATTERNATOMIC_GROUPPOSSESSIVE_REPEAT"

var _opcode_index = [...]uint8{0, 7, 10, 16, 26, 28, 34, 42, 50, 65, 67, 74, 84, 94, 100, 111, 116, 126, 138, 155}

func (i opcode) String() string {
	if i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[atBeginning-0]
	_ = x[atBeginningString-1]
	_ = x[atBoundary-2]
	_ = x[atNonBoundary-3]
	_ = x[atEnd-4]
	_ = x[atEndString-5]
}

const _atcode_name = "AT_BEGINNINGAT_BEGINNING_STRINGAT_BOUNDARYAT_NON_BOUNDARYAT_ENDAT_END_STRING"

var _atcode_index = [...]uint8{0, 12, 31, 42, 57, 63, 76}

func (i atcode) String() string {
	if i >= atcode(len(_atcode_index)-1) {
		return "atcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _atcode_name[_atcode_index[i]:_atcode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[categoryDigit-0]
	_ = x[categoryNotDigit-1]
	_ = x[categorySpace-2]
	_ = x[categoryNotSpace-3]
	_ = x[categoryWord-4]
	_ = x[categoryNotWord-5]
}

const _catcode_name = "CATEGORY_DIGITCATEGORY_NOT_DIGITCATEGORY_SPACECATEGORY_NOT_SPACECATEGORY_WORDCATEGORY_NOT_WORD"

var _catcode_index = [...]uint8{0, 14, 32, 46, 64, 77, 94}

func (i catcode) String() string {
	if i >= catcode(len(_catcode_index)-1) {
		return "catcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _catcode_name[_catcode_index[i]:_catcode_index[i+1]]
}
